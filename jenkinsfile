node {
 try  {
 notify('Job Started') 

     
  stage('Git-Checkout') {
   git 'https://github.com/kalyankkc/code_repo.git'
  }
    
 def project_path="Bikes/"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
   stage('Maven-Test') {
   sh label: '', script: 'mvn test'
  }
  

   stage('sonar') {
        withSonarQubeEnv('sonarqube') {
            sh "mvn sonar:sonar"
        }
    }
  
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
    stage('Archive-Artifacts') {
   archiveArtifacts 'target/*.war'
  }  
}
   def project_path="docker/"
 dir(project_path) {
   stage('Docker-Stage-Deployment') {
   sh label: '', script: 'docker-compose up -d --build'
  }
}
  
    stage('Ansible-Checkout') {
   git 'https://github.com/kalyankkc/ansible_repo.git'
  }
  
  dir(project_path) {
  stage('Geting Ready For Ansible') {
  sh label: 'Docker', script: 'cp -rf target/*.war ansible/templates/'
  sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ansible/templates/apps/index.html"
  }  
}
   
 
   stage('Ansible-Checkout') {
   git 'https://github.com/kalyankkc/terraform_repo.git'
  }

def project_terra="terraform/"
dir(project_terra) {
   stage('Prod Deployment on AWS'){
   sh label: 'terraform', script: '/bin/terraform  init'
   sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
   }
}

notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "kalyankkc118@.gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
