node {
 try  {
 notify('Job Started') 

     
  stage('Git-Checkout') {
   git 'https://github.com/kalyankkc/code_repo.git'
  }
    
 def project_path="Bikes/"
 
 dir(project_path) {
    
  stage('Maven-Clean') {
   sh label: '', script: 'mvn clean'
  }
    
 stage('Maven-Compile') {
   sh label: '', script: 'mvn compile'
  }
  
   stage('Maven-Test') {
   sh label: '', script: 'mvn test'
  }
  

   stage('sonar') {
        withSonarQubeEnv('sonarqube') {
            sh "mvn sonar:sonar"
        }
    }
  
   stage('Maven-Package') {
   sh label: '', script: 'mvn package'
  }
  
    stage('Archive-Artifacts') {
   archiveArtifacts 'target/*.war'
  }  
  
      stage('Jfrog Artifacory'){
        def server= Artifactory.server 'Jfrog'
            def uploadSpec= """{
                "files": [{
                "pattern": "target/*.war",
                "target": "project-warfile"}]
            }"""
            server.upload(uploadSpec)
    }
  
  
}
   def docker_path="docker/"
 dir(docker_path) {
    stage('Download from Jfrog'){
        def server= Artifactory.server 'Jfrog'
            def downloadSpec = """{
                "files": [{
                "pattern": "project-warfile/*.war",
                "target": "jfrogdownload/" }]
            }"""
        server.download(downloadSpec)
   }
   stage('Docker-Stage-Deployment') {
   sh label: '', script: 'docker-compose up -d --build'
  }
}
  
    stage('Ansible-Checkout') {
   git 'https://github.com/kalyankkc/ansible_repo.git'
  }
  
  
   def ansible_path="ansible/"
  dir(ansible_path) {
       stage('Download from Jfrog'){
        def server= Artifactory.server 'Jfrog'
            def downloadSpec = """{
                "files": [{
                "pattern": "project-warfile/*.war",
                "target": "jfrogdownload/" }]
            }"""
        server.download(downloadSpec)
   }
  
  
  
  stage('Geting Ready For Ansible') {
  sh label: 'Docker', script: 'cp -rf jfrogdownload/*.war ansible/templates/'
  sh label: 'Jenkins', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ansible/templates/apps/index.html"
  }  
}
   
 
   stage('Terraform-Checkout') {
   git 'https://github.com/kalyankkc/terraform_repo.git'
  }

def terraform_path="terraform/"
dir(terraform_path) {
   stage('Prod Deployment on AWS'){
   sh label: 'terraform', script: '/bin/terraform  init'
   sh label: 'terraform', script: '/bin/terraform  apply -input=false -auto-approve'
   }
}

notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}
}



def notify(status){
    emailext (
	to: "kalyankkc118@.gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
